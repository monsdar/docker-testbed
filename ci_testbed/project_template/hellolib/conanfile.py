from conans import ConanFile, CMake, tools

#TODO: Put get_version into a module that we can import then
def get_version(major=1, minor=0, patch=0):
    version = str(major) + "." + str(minor) + "." + str(patch)
    git = tools.Git()
    try:
        return "%s-%s" % (version, git.get_revision()[:8]) #first 8 digits is enough
    except Exception as ex:
        print("Package is not part of a Git repo, returning an empty hash. Exception: " + str(ex))
        return "%s-0" % version

class MyConan(ConanFile):
    name = "hellolib"
    version = get_version(1,0,0)
    description = "Autogenerated sample library"
    settings = "os", "compiler", "build_type", "arch"
    options = {"shared": [True, False]}
    default_options = {"shared": True}
    generators = "cmake"
    exports_sources="hellolib/generator.h", "generator.cpp", "CMakeLists.txt"

    def requirements(self):
        pass
    
    def build(self):
        cmake = CMake(self)
        cmake.configure(source_folder=".")
        cmake.build()

    def package(self):
        self.copy("hellolib/*.h", dst="include")
        self.copy("*.lib", dst="lib", keep_path=False)
        self.copy("*.dll", dst="bin", keep_path=False)
        self.copy("*.so", dst="lib", keep_path=False)
        self.copy("*.dylib", dst="lib", keep_path=False)
        self.copy("*.a", dst="lib", keep_path=False)

    def package_info(self):
        self.cpp_info.libs = ["hellolib"]
